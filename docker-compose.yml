# Production Docker Compose for Raspberry Pi 5
# Optimized for ARM64 architecture with 8GB RAM

services:
  # InfluxDB Time Series Database
  influxdb:
    image: influxdb:2.7.7-alpine
    container_name: planetplant-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME:-admin}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD:-plantplant123}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG:-planetplant}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET:-sensor-data}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN:-plantplant-super-secret-auth-token}
      - DOCKER_INFLUXDB_INIT_RETENTION=${INFLUXDB_RETENTION:-90d}
    volumes:
      - influxdb-storage:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
      - ./config/influxdb:/docker-entrypoint-initdb.d
    networks:
      - planetplant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Mosquitto MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0.18-openssl
    container_name: planetplant-mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - mosquitto-config:/mosquitto/config
      - mosquitto-data:/mosquitto/data
      - mosquitto-logs:/mosquitto/log
      - ./config/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    networks:
      - planetplant-network
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t test -m 'health check' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Redis Cache and Session Store
  redis:
    image: redis:7.2.5-alpine
    container_name: planetplant-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-plantplant123}
    volumes:
      - redis-data:/data
    networks:
      - planetplant-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Backend Node.js Server
  backend:
    build:
      context: ./raspberry-pi
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=20-alpine
    container_name: planetplant-backend
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      - HOST=${HOST:-0.0.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - INFLUXDB_URL=${INFLUXDB_URL:-http://influxdb:8086}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-planetplant}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-sensor-data}
      - MQTT_HOST=${MQTT_HOST:-mosquitto}
      - MQTT_PORT=${MQTT_PORT:-1883}
      - MQTT_CLIENT_ID=${MQTT_CLIENT_ID:-planetplant-server}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - MOISTURE_THRESHOLD=${MOISTURE_THRESHOLD:-30}
      - WATERING_DURATION=${WATERING_DURATION:-5000}
      - MAX_WATERING_PER_DAY=${MAX_WATERING_PER_DAY:-3}
    volumes:
      - ./raspberry-pi/logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - planetplant-network
    depends_on:
      influxdb:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'

  # Frontend React PWA
  frontend:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    container_name: planetplant-frontend
    restart: unless-stopped
    expose:
      - "80"
    networks:
      - planetplant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx-proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: planetplant-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - planetplant-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  # Optional: Grafana for Advanced Monitoring
  grafana:
    image: grafana/grafana-oss:10.2.0
    container_name: planetplant-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-plantplant123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - /etc/localtime:/etc/localtime:ro
    networks:
      - planetplant-network
    depends_on:
      influxdb:
        condition: service_healthy
    profiles:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

volumes:
  influxdb-storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/planetplant/influxdb-data
  influxdb-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/planetplant/influxdb-config
  mosquitto-config:
    driver: local
  mosquitto-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/planetplant/mosquitto-data
  mosquitto-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/planetplant/mosquitto-logs
  grafana-storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/planetplant/grafana-data
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/planetplant/redis-data

networks:
  planetplant-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16