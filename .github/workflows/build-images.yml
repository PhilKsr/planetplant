name: 🏗️ Build Multi-Arch Images

on:
  workflow_dispatch:
  push:
    paths:
      - 'raspberry-pi/**'
      - 'webapp/**'
      - 'nginx/**'
      - 'docker-compose*.yml'
      - '.github/workflows/build-images.yml'

env:
  REGISTRY: ghcr.io
  REGISTRY_PREFIX: ghcr.io/philksr/planetplant

jobs:
  build-images:
    name: 🏗️ Build Multi-Arch Container Images
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        component:
          - name: backend
            context: ./raspberry-pi
            dockerfile: ./raspberry-pi/Dockerfile
          - name: frontend
            context: ./webapp
            dockerfile: ./webapp/Dockerfile
          - name: nginx-proxy
            context: ./nginx
            dockerfile: ./nginx/Dockerfile
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        
    - name: 🔐 Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract Image Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_PREFIX }}/${{ matrix.component.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.title=PlanetPlant ${{ matrix.component.name }}
          org.opencontainers.image.description=Smart IoT Plant Watering System - ${{ matrix.component.name }} component
          org.opencontainers.image.vendor=PlanetPlant
          
    - name: 🏗️ Build and Push Multi-Arch Image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.component.context }}
        file: ${{ matrix.component.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.component.name }}
        cache-to: type=gha,mode=max,scope=${{ matrix.component.name }}
        
    - name: ✅ Image Build Summary
      run: |
        echo "🎉 Successfully built and pushed: ${{ matrix.component.name }}"
        echo "📦 Image: ${{ env.REGISTRY_PREFIX }}/${{ matrix.component.name }}:latest"
        echo "🏛️ Platforms: linux/amd64, linux/arm64"
        echo "🔗 Registry: ${{ env.REGISTRY }}"