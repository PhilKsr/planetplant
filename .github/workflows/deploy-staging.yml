name: üß™ Staging Deployment Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for staging (optional)'
        required: false
        default: 'develop'
      reset_data:
        description: 'Reset staging database'
        type: boolean
        required: false
        default: false

env:
  REGISTRY: ghcr.io
  REGISTRY_PREFIX: ghcr.io/philksr/planetplant
  NODE_VERSION: '20'
  STAGING_PREFIX: staging

jobs:
  # =============================================================================
  # BUILD STAGING IMAGES
  # =============================================================================
  build-staging:
    name: üèóÔ∏è Build Staging Images
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      version: ${{ steps.version.outputs.version }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}
      nginx-digest: ${{ steps.build-nginx.outputs.digest }}
      
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref || 'develop' }}
        
    - name: üè∑Ô∏è Generate Staging Version
      id: version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="develop-$(date +'%Y%m%d')-$(git rev-parse --short HEAD)"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Staging Version: ${VERSION}"
        
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        
    - name: üîê Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üèóÔ∏è Build & Push Staging Backend
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: ./raspberry-pi
        file: ./raspberry-pi/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY_PREFIX }}/backend:develop
          ${{ env.REGISTRY_PREFIX }}/backend:${{ steps.version.outputs.version }}
        labels: |
          org.opencontainers.image.title=PlanetPlant Backend (Staging)
          org.opencontainers.image.description=Smart IoT Plant Watering System - Backend API (Staging)
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha,scope=backend-staging
        cache-to: type=gha,mode=max,scope=backend-staging
        
    - name: üåê Build & Push Staging Frontend
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./webapp
        file: ./webapp/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY_PREFIX }}/frontend:develop
          ${{ env.REGISTRY_PREFIX }}/frontend:${{ steps.version.outputs.version }}
        labels: |
          org.opencontainers.image.title=PlanetPlant Frontend (Staging)
          org.opencontainers.image.description=Smart IoT Plant Watering System - React PWA (Staging)
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha,scope=frontend-staging
        cache-to: type=gha,mode=max,scope=frontend-staging
        
    - name: üîÄ Build & Push Staging Nginx
      id: build-nginx
      uses: docker/build-push-action@v5
      with:
        context: ./nginx
        file: ./nginx/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY_PREFIX }}/nginx-proxy:develop
          ${{ env.REGISTRY_PREFIX }}/nginx-proxy:${{ steps.version.outputs.version }}
        labels: |
          org.opencontainers.image.title=PlanetPlant Nginx (Staging)
          org.opencontainers.image.description=Smart IoT Plant Watering System - Reverse Proxy (Staging)
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha,scope=nginx-staging
        cache-to: type=gha,mode=max,scope=nginx-staging

  # =============================================================================
  # STAGING TESTING
  # =============================================================================
  test-staging:
    name: üß™ Staging Tests
    runs-on: ubuntu-latest
    needs: [build-staging]
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref || 'develop' }}
      
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üìã Create Staging Test Environment
      run: |
        # Create staging environment file
        cat > .env.staging << EOF
        NODE_ENV=staging
        REGISTRY_PREFIX=${{ env.REGISTRY_PREFIX }}
        IMAGE_TAG=${{ needs.build-staging.outputs.version }}
        INFLUXDB_ORG=planetplant-staging
        INFLUXDB_BUCKET=sensor-data-staging
        INFLUXDB_TOKEN=plantplant-staging-token
        LOG_LEVEL=debug
        EOF
        
    - name: üîê Login to Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üìÅ Setup Staging Directories
      run: |
        mkdir -p {data,config,logs}/staging/{influxdb,mosquitto,redis,grafana,backend,nginx}
        chmod -R 755 data config logs
        
    - name: üöÄ Start Staging Environment
      run: |
        # Load staging environment
        set -a && source .env.staging && set +a
        
        # Start staging services
        docker compose -f docker-compose.staging.yml up -d --no-build
        
    - name: ‚è≥ Wait for Staging Services
      run: |
        echo "‚è≥ Waiting for staging services to initialize..."
        sleep 45
        
    - name: ü©∫ Staging Health Checks
      run: |
        echo "ü©∫ Testing staging health endpoints..."
        
        # InfluxDB staging
        timeout 60 bash -c 'until curl -f http://localhost:8087/ping; do sleep 2; done'
        echo "‚úÖ InfluxDB Staging is healthy"
        
        # Backend API staging
        timeout 60 bash -c 'until curl -f http://localhost:3002/api/system/status; do sleep 2; done'
        echo "‚úÖ Backend Staging API is healthy"
        
        # Frontend staging
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        echo "‚úÖ Frontend Staging is healthy"
        
    - name: üß™ Staging API Tests
      run: |
        echo "üß™ Running staging API tests..."
        
        # Test system status
        RESPONSE=$(curl -s http://localhost:8080/api/system/status)
        if echo "$RESPONSE" | jq -e '.success == true' > /dev/null; then
          echo "‚úÖ Staging system status API working"
        else
          echo "‚ùå Staging system status API failed"
          echo "Response: $RESPONSE"
          exit 1
        fi
        
        # Test plants API
        PLANTS_RESPONSE=$(curl -s http://localhost:8080/api/plants)
        if echo "$PLANTS_RESPONSE" | jq -e '.success == true' > /dev/null; then
          echo "‚úÖ Staging plants API working"
        else
          echo "‚ùå Staging plants API failed"
          echo "Response: $PLANTS_RESPONSE"
          exit 1
        fi
        
    - name: üß™ Staging Integration Tests
      run: |
        echo "üß™ Running staging integration tests..."
        
        # Test MQTT connectivity (if available)
        if command -v mosquitto_pub &> /dev/null; then
          echo "üì° Testing MQTT staging..."
          mosquitto_pub -h localhost -p 1884 -t "test/staging" -m "integration test" || true
          echo "‚úÖ MQTT staging accessible"
        fi
        
        # Test database connectivity
        echo "üóÑÔ∏è Testing database staging..."
        INFLUX_RESPONSE=$(curl -s "http://localhost:8087/api/v2/ready")
        if echo "$INFLUX_RESPONSE" | jq -e '.status == "ready"' > /dev/null; then
          echo "‚úÖ InfluxDB staging ready"
        else
          echo "‚ö†Ô∏è InfluxDB staging not ready (may be normal during startup)"
        fi
        
    - name: üìä Staging Performance Tests
      run: |
        echo "üìä Running staging performance tests..."
        
        # API response time tests
        for endpoint in "system/status" "plants"; do
          echo "Testing /api/$endpoint..."
          for i in {1..3}; do
            START=$(date +%s%N)
            curl -s "http://localhost:8080/api/$endpoint" > /dev/null
            END=$(date +%s%N)
            DURATION=$(( (END - START) / 1000000 ))
            echo "  Response $i: ${DURATION}ms"
            
            if [ $DURATION -gt 3000 ]; then
              echo "‚ùå Staging API too slow: ${DURATION}ms"
              exit 1
            fi
          done
        done
        echo "‚úÖ Staging performance acceptable"
        
    - name: üõë Cleanup Staging Test
      if: always()
      run: |
        echo "üßπ Cleaning up staging test environment..."
        docker compose -f docker-compose.staging.yml logs --tail=50 || true
        docker compose -f docker-compose.staging.yml down -v || true

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: üé≠ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-staging, test-staging]
    if: ${{ always() && needs.build-staging.result == 'success' && needs.test-staging.result == 'success' }}
    environment: staging
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref || 'develop' }}
      
    - name: üîê Setup SSH for Staging
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PI_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "${{ secrets.PI_HOST }}" >> ~/.ssh/known_hosts
        
    - name: üì¶ Prepare Staging Deployment
      run: |
        # Create staging environment file
        cat > deploy.staging.env << EOF
        REGISTRY_PREFIX=${{ env.REGISTRY_PREFIX }}
        IMAGE_TAG=${{ needs.build-staging.outputs.version }}
        NODE_ENV=staging
        INFLUXDB_ORG=planetplant-staging
        INFLUXDB_BUCKET=sensor-data-staging
        INFLUXDB_TOKEN=plantplant-staging-token
        LOG_LEVEL=debug
        EOF
        
    - name: üì§ Upload Staging Files
      run: |
        # Create staging directory on Pi
        ssh pi@${{ secrets.PI_HOST }} "mkdir -p /opt/planetplant/staging"
        
        # Upload staging compose and config
        scp docker-compose.staging.yml pi@${{ secrets.PI_HOST }}:/opt/planetplant/staging/
        scp deploy.staging.env pi@${{ secrets.PI_HOST }}:/opt/planetplant/staging/.env
        
        # Create staging directories
        ssh pi@${{ secrets.PI_HOST }} "
          cd /opt/planetplant/staging &&
          mkdir -p {data,config,logs}/staging/{influxdb,mosquitto,redis,grafana,backend,nginx} &&
          chmod -R 755 data config logs
        "
        
    - name: üîê Registry Login on Staging
      run: |
        ssh pi@${{ secrets.PI_HOST }} "echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin"
        
    - name: üóÑÔ∏è Reset Staging Data (if requested)
      if: ${{ inputs.reset_data }}
      run: |
        ssh pi@${{ secrets.PI_HOST }} "
          cd /opt/planetplant/staging &&
          echo 'üóëÔ∏è Resetting staging data...' &&
          docker compose -f docker-compose.staging.yml down -v &&
          rm -rf data/staging/* logs/staging/* &&
          echo '‚úÖ Staging data reset completed'
        "
        
    - name: üöÄ Deploy to Staging
      run: |
        ssh pi@${{ secrets.PI_HOST }} "
          cd /opt/planetplant/staging &&
          echo 'üé≠ Starting staging deployment...' &&
          
          # Pull new staging images
          docker compose -f docker-compose.staging.yml pull &&
          
          # Start staging environment
          docker compose -f docker-compose.staging.yml up -d &&
          
          echo '‚úÖ Staging deployment completed'
        "
        
    - name: ‚è≥ Staging Warmup
      run: |
        echo "‚è≥ Waiting for staging services to warm up..."
        sleep 30
        
    - name: ü©∫ Post-Deploy Staging Health Check
      run: |
        ssh pi@${{ secrets.PI_HOST }} "
          echo 'ü©∫ Running staging health checks...' &&
          
          # Check container status
          docker compose -f docker-compose.staging.yml -C /opt/planetplant/staging ps &&
          
          # Health endpoint tests
          timeout 60 bash -c 'until curl -f http://localhost:8087/ping; do sleep 2; done' &&
          echo '‚úÖ InfluxDB Staging healthy' &&
          
          timeout 60 bash -c 'until curl -f http://localhost:3002/api/system/status; do sleep 2; done' &&
          echo '‚úÖ Backend Staging healthy' &&
          
          timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done' &&
          echo '‚úÖ Frontend Staging healthy' &&
          
          echo 'üéâ All staging health checks passed!'
        "

  # =============================================================================
  # STAGING VALIDATION TESTS
  # =============================================================================
  validate-staging:
    name: ‚úÖ Staging Validation
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    
    steps:
    - name: üîê Setup SSH for Validation
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PI_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "${{ secrets.PI_HOST }}" >> ~/.ssh/known_hosts
        
    - name: üß™ Comprehensive Staging Tests
      run: |
        ssh pi@${{ secrets.PI_HOST }} "
          echo 'üß™ Running comprehensive staging validation...' &&
          
          # Test all API endpoints
          echo 'Testing system status...' &&
          RESPONSE=\$(curl -s http://localhost:8080/api/system/status) &&
          echo \"\$RESPONSE\" | jq -e '.success == true' > /dev/null &&
          echo '‚úÖ System status OK' &&
          
          echo 'Testing plants API...' &&
          PLANTS=\$(curl -s http://localhost:8080/api/plants) &&
          echo \"\$PLANTS\" | jq -e '.success == true' > /dev/null &&
          echo '‚úÖ Plants API OK' &&
          
          # Test frontend
          echo 'Testing frontend...' &&
          curl -f http://localhost:8080/ > /dev/null &&
          echo '‚úÖ Frontend accessible' &&
          
          # Performance validation
          echo 'Testing performance...' &&
          for i in {1..5}; do
            START=\$(date +%s%N) &&
            curl -s http://localhost:8080/api/system/status > /dev/null &&
            END=\$(date +%s%N) &&
            DURATION=\$(( (END - START) / 1000000 )) &&
            echo \"Performance test \$i: \${DURATION}ms\" &&
            if [ \$DURATION -gt 2000 ]; then
              echo '‚ùå Staging performance issue: '\${DURATION}'ms' &&
              exit 1
            fi
          done &&
          
          echo 'üéâ All staging validation tests passed!'
        "
        
    - name: üìä Staging Environment Summary
      run: |
        ssh pi@${{ secrets.PI_HOST }} "
          cd /opt/planetplant/staging &&
          echo 'üìä Staging Environment Summary' &&
          echo '=============================' &&
          echo 'üê≥ Container Status:' &&
          docker compose -f docker-compose.staging.yml ps &&
          echo '' &&
          echo 'üíæ Resource Usage:' &&
          docker stats --no-stream --format 'table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}' \$(docker compose -f docker-compose.staging.yml ps -q) &&
          echo '' &&
          echo 'üåê Access URLs:' &&
          echo '  Frontend: http://${{ secrets.PI_HOST }}:8080' &&
          echo '  Backend API: http://${{ secrets.PI_HOST }}:3002/api' &&
          echo '  InfluxDB: http://${{ secrets.PI_HOST }}:8087' &&
          echo '  Grafana: http://${{ secrets.PI_HOST }}:3003' &&
          echo '' &&
          echo '‚úÖ Staging deployment ready for testing!'
        "

  # =============================================================================
  # STAGING NOTIFICATIONS
  # =============================================================================
  notify-staging:
    name: üì¢ Staging Notifications
    runs-on: ubuntu-latest
    needs: [build-staging, test-staging, deploy-staging, validate-staging]
    if: always()
    
    steps:
    - name: üìä Determine Staging Status
      id: status
      run: |
        BUILD_STATUS="${{ needs.build-staging.result }}"
        TEST_STATUS="${{ needs.test-staging.result }}"
        DEPLOY_STATUS="${{ needs.deploy-staging.result }}"
        VALIDATE_STATUS="${{ needs.validate-staging.result }}"
        
        if [[ "$BUILD_STATUS" == "success" && "$TEST_STATUS" == "success" && "$DEPLOY_STATUS" == "success" && "$VALIDATE_STATUS" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=üé≠ Staging deployment successful" >> $GITHUB_OUTPUT
          echo "color=3447003" >> $GITHUB_OUTPUT  # Blue for staging
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=‚ùå Staging deployment failed" >> $GITHUB_OUTPUT  
          echo "color=15105570" >> $GITHUB_OUTPUT  # Orange for staging failure
        fi
        
    - name: üì± Discord Staging Notification
      if: ${{ env.DISCORD_WEBHOOK != '' }}
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        curl -H "Content-Type: application/json" -X POST \
          -d "{
            \"embeds\": [{
              \"title\": \"${{ steps.status.outputs.message }}\",
              \"description\": \"PlanetPlant Staging Deployment\",
              \"color\": ${{ steps.status.outputs.color }},
              \"fields\": [
                {\"name\": \"Version\", \"value\": \"${{ needs.build-staging.outputs.version }}\", \"inline\": true},
                {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
                {\"name\": \"Build\", \"value\": \"${{ needs.build-staging.result }}\", \"inline\": true},
                {\"name\": \"Tests\", \"value\": \"${{ needs.test-staging.result }}\", \"inline\": true},
                {\"name\": \"Deploy\", \"value\": \"${{ needs.deploy-staging.result }}\", \"inline\": true},
                {\"name\": \"Validation\", \"value\": \"${{ needs.validate-staging.result }}\", \"inline\": true},
                {\"name\": \"Access\", \"value\": \"http://${{ secrets.PI_HOST }}:8080\", \"inline\": false}
              ],
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
            }]
          }" \
          "$DISCORD_WEBHOOK" || echo "Discord notification failed"
          
    - name: üìù Staging Summary
      run: |
        echo "üìã Staging Deployment Summary"
        echo "============================="
        echo "üè∑Ô∏è  Version: ${{ needs.build-staging.outputs.version }}"
        echo "üåø Branch: ${{ github.ref_name }}"
        echo "üì¶ Build: ${{ needs.build-staging.result }}"
        echo "üß™ Tests: ${{ needs.test-staging.result }}"
        echo "üé≠ Deploy: ${{ needs.deploy-staging.result }}"
        echo "‚úÖ Validation: ${{ needs.validate-staging.result }}"
        echo "üì± Status: ${{ steps.status.outputs.status }}"
        echo ""
        if [[ "${{ steps.status.outputs.status }}" == "success" ]]; then
          echo "üéâ Staging environment ready for testing!"
          echo "üåê Access: http://${{ secrets.PI_HOST }}:8080"
          echo "üìä API: http://${{ secrets.PI_HOST }}:3002/api"
        else
          echo "‚ùå Staging deployment failed. Check logs for details."
        fi